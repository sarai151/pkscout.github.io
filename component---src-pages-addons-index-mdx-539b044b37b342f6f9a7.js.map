{"version":3,"sources":["webpack:///./src/pages/addons/index.mdx","webpack:///./src/components/IconList.tsx","webpack:///./node_modules/gatsby-theme-patternfly/src/templates/Default.js"],"names":["pageQuery","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","items","data","FeaturedAddons","edges","linkroot","NewAddons","UpdatedAddons","LookAndFeel","InformationProviders","Games","Others","isMDXComponent","categoryIconList","width","marginleft","marginright","iconwidth","iconheight","undefined","node","map","item","index","push","style","marginLeft","marginRight","paddingTop","hasGutter","align","to","slug","height","alt","src","icon","name","Default","children","variant","PageSectionVariants","light"],"mappings":"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","file":"component---src-pages-addons-index-mdx-539b044b37b342f6f9a7.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/pkscout/Documents/GitHub/kodi-tv/node_modules/gatsby-theme-patternfly/src/templates/Default.js\";\nimport { graphql } from \"gatsby\";\nimport IconList from 'src/components/IconList';\nexport const pageQuery = graphql`\n  query {\n    Games: allCategory(sort: {fields: name, order: ASC}, filter: {grouping: {eq: \"Games\"}}) {\n      edges {\n        node {\n          name\n          slug\n          icon\n        }\n      }\n    }\n    InformationProviders: allCategory(sort: {fields: name, order: ASC}, filter: {grouping: {eq: \"Information providers\"}}) {\n      edges {\n        node {\n          name\n          slug\n          icon\n        }\n      }\n    }\n    LookAndFeel: allCategory(sort: {fields: name, order: ASC}, filter: {grouping: {eq: \"Look and feel\"}}) {\n      edges {\n        node {\n          name\n          slug\n          icon\n        }\n      }\n    }\n    Others: allCategory(sort: {fields: name, order: ASC}, filter: {grouping: {eq: \"Other\"}}) {\n      edges {\n        node {\n          name\n          slug\n          icon\n        }\n      }\n    }\n    FeaturedAddons: allAddon(filter: {featured: {eq: \"true\"}}) {\n      edges {\n        node {\n          name\n          slug\n          icon\n        }\n      }\n    }\n    NewAddons: allAddon(limit: 4, filter: {agetype: {eq: \"new\"}}, sort: {fields: firstseen, order: DESC}) {\n      edges {\n        node {\n          name\n          slug\n          icon\n        }\n      }\n    }\n    UpdatedAddons: allAddon(limit: 4, filter: {agetype: {eq: \"existing\"}}, sort: {fields: lastupdate, order: DESC}) {\n      edges {\n        node {\n          name\n          slug\n          icon\n        }\n      }\n    }\n  }\n`;\nexport const _frontmatter = {};\nconst layoutProps = {\n  pageQuery,\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"addons\"\n    }}>{`Addons`}</h1>\n    <h2 {...{\n      \"id\": \"kodi-can-do-so-much-more-than-what-comes-in-the-box\"\n    }}>{`Kodi can do so much more than what comes in the box`}</h2>\n    <p>{`We have a huge catalogue of extra Add-On components for you to take advantage of. All Add-Ons can be installed via the application itself and they will automatically update as new versions are released. It is kind of like an “App Store” for Kodi, but everything is `}<strong parentName=\"p\">{`free!`}</strong></p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"/addons/category/music-addons\"\n      }}>{`Music Add-Ons`}</a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"/addons/category/video-addons\"\n      }}>{`Video Add-Ons`}</a>{` let you stream internet content. `}<a parentName=\"p\" {...{\n        \"href\": \"/addons/category/skins\"\n      }}>{`Skins`}</a>{` allow you to change the look and experience of the interface. `}<a parentName=\"p\" {...{\n        \"href\": \"/addons/category/program-addons\"\n      }}>{`Program Add-Ons`}</a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"/addons/category/services\"\n      }}>{`Service Add-Ons`}</a>{` provide helpful tools while `}<a parentName=\"p\" {...{\n        \"href\": \"/addons/category/web-interfaces\"\n      }}>{`web interfaces`}</a>{` are for controlling Kodi remotely. And that is just the tip of the iceberg. Browse all the categories below to see what is available and install them via Kodi.`}</p>\n    <h2 {...{\n      \"id\": \"featured-add-ons\"\n    }}>{`Featured Add-ons`}</h2>\n    <IconList items={props.data.FeaturedAddons.edges} linkroot='/addons/' mdxType=\"IconList\" />\n    <h2 {...{\n      \"id\": \"new-additions\"\n    }}>{`New Additions`}</h2>\n    <IconList items={props.data.NewAddons.edges} linkroot='/addons/' mdxType=\"IconList\" />\n    <h2 {...{\n      \"id\": \"recently-updated\"\n    }}>{`Recently Updated`}</h2>\n    <IconList items={props.data.UpdatedAddons.edges} linkroot='/addons/' mdxType=\"IconList\" />\n    <h2 {...{\n      \"id\": \"categories\"\n    }}>{`Categories`}</h2>\n    <h3 {...{\n      \"id\": \"look-and-feel\"\n    }}>{`Look and Feel`}</h3>\n    <IconList items={props.data.LookAndFeel.edges} linkroot='/addons/category/' mdxType=\"IconList\" />\n    <h3 {...{\n      \"id\": \"information-providers\"\n    }}>{`Information Providers`}</h3>\n    <IconList items={props.data.InformationProviders.edges} linkroot='/addons/category/' mdxType=\"IconList\" />\n    <h3 {...{\n      \"id\": \"games\"\n    }}>{`Games`}</h3>\n    <IconList items={props.data.Games.edges} linkroot='/addons/category/' mdxType=\"IconList\" />\n    <h3 {...{\n      \"id\": \"others\"\n    }}>{`Others`}</h3>\n    <IconList items={props.data.Others.edges} linkroot='/addons/category/' mdxType=\"IconList\" />\n\n\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import React from \"react\"\nimport { Gallery, GalleryItem } from \"@patternfly/react-core\"\nimport { Link } from \"gatsby\"\n\nexport default function categoryIconList(props: {\n  items: any[]\n  width: string | undefined\n  marginleft: string | undefined\n  marginright: string | undefined\n  iconwidth: string | undefined\n  iconheight: string | undefined\n  linkroot: string | undefined\n}) {\n  let items = []\n  let width = \"100%\"\n  let marginleft = \"0%\"\n  let marginright = \"0%\"\n  let iconwidth = \"150\"\n  let iconheight = \"150\"\n  let linkroot = \"\"\n  if (props.items[0].node !== undefined) {\n    props.items.map((item: { node: any }, index: any) => items.push(item.node))\n  } else {\n    items = props.items\n  }\n  if (props.width !== undefined) {\n    width = props.width\n  }\n  if (props.marginleft !== undefined) {\n    marginleft = props.marginleft\n  }\n  if (props.marginright !== undefined) {\n    marginright = props.marginright\n  }\n  if (props.linkroot !== undefined) {\n    linkroot = props.linkroot\n  }\n  if (props.iconwidth !== undefined) {\n    iconwidth = props.iconwidth\n  }\n  if (props.iconheight !== undefined) {\n    iconheight = props.iconheight\n  }\n\n  return (\n    <div\n      style={{\n        width: width,\n        marginLeft: marginleft,\n        marginRight: marginright,\n        paddingTop: \"10px\",\n      }}\n    >\n      <Gallery hasGutter>\n        {items.map((item, index) => (\n          <GalleryItem>\n            <div align=\"center\">\n              <Link to={linkroot + item.slug}>\n                <img width={iconwidth} height={iconheight} alt=\"\" src={item.icon} />\n              </Link>\n              <div>\n                <Link to={linkroot + item.slug}>{item.name}</Link>\n              </div>\n            </div>\n          </GalleryItem>\n        ))}\n      </Gallery>\n    </div>\n  )\n}\n","import React from 'react';\nimport Layout from '../components/Layout';\nimport {\n  PageSection,\n  PageSectionVariants\n} from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport Text from '../components/Markdown/Text';\n\nconst Default = ({ children }) => (\n  <Layout>\n    <PageSection variant={PageSectionVariants.light}>\n      <Text>\n        {children}\n      </Text>\n    </PageSection>\n  </Layout>\n);\n\nDefault.propTypes = {\n  children: PropTypes.node\n};\n\nexport default Default;\n"],"sourceRoot":""}